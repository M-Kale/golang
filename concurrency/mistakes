1. Always confirm exit point of goroutine before you write one
2. Identify resource being used and prepare for leakage situation
3. Always Use context to interface for 
  type Context interface {
    Deadline() (deadline time.Time, ok bool)
    Done() <-chan struct{}
    Err() error
    Value(key any) any
}

4. Pass value to gorutine func whenever in loop to make sure all values are passed approrpiately 
  for _, i := range s {
    go func(val int) { 
        fmt.Print(val)
    }(i)
}

5. Do not rely on select + channel with heavy operations : If one or more of the communications can proceed, 
a single one that can proceed is chosen via a uniform pseudo-random selection.

6. Close channels are risky - be carefull of select with close channel - there may be pending messages in other
channels - when done channel hits make sure you read all channel again in loop before closing

7. use chan struct{} rather chan bool when there is no info to be shared - sending true false is confusing so in 
case of signal just send struct{}

8. Prefer {}struct over {}interface because {}interface occupies 8 bytes on 32-bit architecture and 16 bytes on 64-bit architecture.

9. Zero value of channel is nil - Sending on nill channel blocks forever doesn't panic.

10. Don't close a channel from the receiver side and don't close a channel if the channel has multiple concurrent senders.

11.  if we send a message to a nil channel. This goroutine blocks forever 

12. Use nil channel to declare no more value is expected and use it for selection specially in fan in -
waiting or sending to a nil channel is a blocking action, and this behavior isn’t useless.

13. Unbuffred channel are channels without capacity - they are sync and blocking 
ch1 := make(chan int)
ch2 := make(chan int, 0)

14. A potentially mutable value in a context can introduce additional complexity to prevent data races. 
This is probably a design decision to be considered with care.

15. While working with slices in concurrent contexts, we must recall that using append on slices isn’t always race-free. 
Depending on the slice and whether it’s full, the behavior will change. If the slice is full, append is race-free. 
Otherwise, multiple goroutines may compete to update the same array index, resulting in a data race.

16. we have to be careful with the boundaries of a mutex lock. In this section, we have seen why assigning an existing map 
(or an existing slice) to a map isn’t enough to protect against data races. The new variable, whether a map or a slice, 
is backed by the same data set. There are two leading solutions to prevent this: protect the whole function, or work on a 
copy of the actual data. In all cases, let’s be cautious when designing critical sections and make sure the boundaries are accurately defined.

17. a sync.WaitGroup holds an internal counter initialized by default to 0. We can increment this counter using the Add(int) method 
and decrement it using Done() or Add with a negative value. If we want to wait for the counter to be equal to 0, we have to use 
the Wait() method that is blocking.

18. When using a sync.WaitGroup, the Add operation must be done before spinning up a goroutine in the parent goroutine, whereas 
the Done operation must be done within the goroutine.

19. Cond implements a condition variable, a rendezvous point for goroutines waiting for or announcing the occurrence of an event.

20 List of sync
sync.Mutex	812
sync.WaitGroup	446
sync.RWMutex	413
atomic.Add	230
sync.Once	212
atomic.Load	178
atomic.Store	118
sync.Pool	84
atomic.CompareAndSwap	50
sync.Cond	42
atomic.Value	11
atomic.Swap	11

21. The sync package provides basic synchronization primitives such as mutexes, condition variables, and wait groups. 
For all these types, there’s a hard rule to follow: they should never be copied. 

22. Remembering that slices and maps are pointers can prevent common data races.

23. You can send repeated notifications to multiple goroutines with sync.Cond.

24. sync types shouldn’t be copied.




