Strings and Runes

1. Runes are unicode code points | type rune = int32

2.  Indeed, the len built-in function applied on a string doesn’t return the number of characters; 
it returns the number of bytes.

3. Summary 
A charset is a set of characters, whereas an encoding describes how to translate a charset into binary.
In Go, a string references an immutable slice of arbitrary bytes.
Go source code is encoded using UTF-8. Hence, all string literals are UTF-8 strings. But because a string can contain arbitrary bytes, 
  if it’s obtained from somewhere else (not the source code), it isn’t guaranteed to be based on the UTF-8 encoding.
A rune corresponds to the concept of a Unicode code point, meaning an item represented by a single value.
Using UTF-8, a Unicode code point can be encoded into 1 to 4 bytes.
Using len on a string in Go returns the number of bytes, not the number of runes.

4. Use the unicode/utf8 package : 
  a. utf8.RuneCountInString(s)

5. Interating over string are very risky if unicode possibilty is not considered :
if we want to iterate over a string’s runes, we can use the range loop on the string directly. 
But we have to recall that the index corresponds not to the rune index but rather to the starting index of the byte sequence of the rune. 
Because a rune can be composed of multiple bytes, if we want to access the rune itself, we should use the value variable of range, 
not the index in the string. Meanwhile, if we are interested in getting the ith rune of a string, we should convert the string into a slice
of runes in most cases.

6. TrimRight/TrimLeft removes the trailing/leading runes in a set.
   TrimSuffix/TrimPrefix removes a given suffix/prefix.
   
   fmt.Println(strings.TrimLeft("oxo123", "ox")) // 123
  fmt.Println(strings.TrimPrefix("oxo123", "ox")) /// o123
  
7. Always prefer strings.Builder for string concat
Using strings.Builder, we can also append

A byte slice using Write
A single byte using WriteByte
A single rune using WriteRune

--
func concat(values []string) string {
    total := 0
    for i := 0; i < len(values); i++ {
        total += len(values[i])
    }
 
    sb := strings.Builder{}
    sb.Grow(total)
    for _, value := range values {
        _, _ = sb.WriteString(value)
    }
    return sb.String()
}
--

8. As we mentioned, most I/O is done with []byte, not strings. When we’re wondering whether we should work
with strings or []byte, let’s recall that working with []byte isn’t necessarily less convenient. 
Indeed, all the exported functions of the strings package also have alternatives in the bytes 
package: Split, Count, Contains, Index, and so on. Hence, whether we’re doing I/O or not, we should first check 
whether we could implement a whole workflow using bytes instead of strings and avoid the price of additional conversions.

9. As of Go 1.18, the standard library also includes a solution with strings.Clone that returns a fresh copy of a string:

uuid := strings.Clone(log[:36])

Summary

Understanding that a rune corresponds to the concept of a Unicode code point and that it can be composed of multiple bytes should be part of the Go developer’s core knowledge to work accurately with strings.
Iterating on a string with the range operator iterates on the runes with the index corresponding to the starting index of the rune’s byte sequence. To access a specific rune index (such as the third rune), convert the string into a []rune.
strings.TrimRight/strings.TrimLeft removes all the trailing/leading runes contained in a given set, whereas strings.TrimSuffix/strings.TrimPrefix returns a string without a provided suffix/prefix.
Concatenating a list of strings should be done with strings.Builder to prevent allocating a new string during each iteration.
Remembering that the bytes package offers the same operations as the strings package can help avoid extra byte/string conversions.
Using copies instead of substrings can prevent memory leaks, as the string returned by a substring operation will be backed by the same byte array.
