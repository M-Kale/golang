1. Choosing a receiver type for a method isn’t always straightforward. 
----A receiver must be a pointer----

  -If the method needs to mutate the receiver. This rule is also valid if the receiver is a slice and a method needs to append elements:
type slice []int
 
func (s *slice) add(element int) {
    *s = append(*s, element)
}

  -If the method receiver contains a field that cannot be copied: for example, a type part of the sync package 
  (we will discuss this point in mistake #74, “Copying a sync type”).
  
----A receiver should be a pointer----

If the receiver is a large object. Using a pointer can make the call more efficient, as doing so prevents making an extensive copy.
When in doubt about how large is large, benchmarking can be the solution; it’s pretty much impossible to state a specific size, 
because it depends on many factors.
A receiver must be a value

If we have to enforce a receiver’s immutability.
If the receiver is a map, function, or channel. Otherwise, a compilation error occurs.

----A receiver should be a value----

If the receiver is a slice that doesn’t have to be mutated.
If the receiver is a small array or struct that is naturally a value type without mutable fields, such as time.Time.
If the receiver is a basic type such as int, float64, or string.

Summary

- The decision whether to use a value or a pointer receiver should be made based on factors such as the type, whether it has to be mutated,
  whether it contains a field that can’t be copied, and how large the object is. When in doubt, use a pointer receiver.
- Using named result parameters can be an efficient way to improve the readability of a function/method, especially if multiple result 
  parameters have the same type. In some cases, this approach can also be convenient because named result parameters are initialized to their zero value. But be cautious about potential side effects.
- When returning an interface, be cautious about returning not a nil pointer but an explicit nil value. Otherwise, unintended consequences 
  may result because the caller will receive a non-nil value.
- Designing functions to receive io.Reader types instead of filenames improves the reusability of a function and makes testing easier.
- Passing a pointer to a defer function and wrapping a call inside a closure are two possible solutions to overcome the immediate
  evaluation of arguments and receivers.
